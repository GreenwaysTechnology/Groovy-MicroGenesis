Lab Setup:
.........

1.JDK 1.8
2.JAVA_HOME -  jdk/
3.Groovysdk
4.IDE 
   IntelliJ IDEA
   Groovy console.
//////////////////////////////////////////////////////////////////////////////////////////////

What is Groovy? Groovy Programming language?

 Groovy is programming language for jvm.


JVM -Java Virtual Machine - To run java applications

JVM helps to build platform indepdendent applications.

java application can be written using programming language called "Java programming language"

Java pl
 -It is high level pl
 -Object oriented Programming.

Java applications:

Editions:

-JAVA SE - Standard Edition - Core java
-JAVA EE - Enterprise edition - Server apps - web apps,Web services,databases,distributed...
-JAVA ME - Micro Edition - Mobil,card,device apps.

Java Technology created by SUN microsystem at 1989,later acquired by Oracle.
//////////////////////////////////////////////////////////////////////////////////////////

Standards organization:

C was standarized by ANSI
javascript ECMA
SQL ANSI.
.....

JAVA who is standarizing?

JCP - Java Community Process
JSR 

Core spec:
1.jvm spec

2.jse spec

3.jee spec
   servlet spec
   webservice spec

JSR-223 Spec published on may 2003 June.
JSR 223: Scripting for the JavaTM Platform

JSR-223 Objective:

Before that,
only one lanugage was there for jvm- java pl.
we can write , compile,run java programs on jvm

Groovy was the first  Scripting language for jvm ,which was created based JSR-223 Spec.
///////////////////////////////////////////////////////////////////////////////////////////

Groovy is dialect of java which is running on JVM.


                                     JAVA code  - Hello.java
					 | 
                                      java compiler-javac -Hello.class (byte code)
                                          |
                                      java Hello - Run time
					|
				    Java Runtime Env -JVM



VM Poly glot.
       
                JPL  Groovy   Kotlin   JRuby Scala 
		----------------------------------
				|
			     .class
				|
			       JVM
//////////////////////////////////////////////////////////////////////////////////////////////

Groovy is programming language inspired from java,Ruby,Javascript,Perl, Smalltalk, Objective-C


Groovy is
  -object oriented
  -functional style
  -dynamic typed
  -static typed 
  -delcarative
  -dsl
Programming language.

OO talks about How to decompose Realtime problems thinking interms objects.

...............................................................
Object oriented Concepts:
1.Abstraction
2.Encapsulation
3.Modularity
4.Hierachy
5.Typing
6.Persistency
7.Concurrency
...............................................................
functional Programming:
......................

Functional is one of the programming paradigm, which is very oldest among all Programming styles.

Groovy was the first programming language introduced funcitonal programming principles on java.

//////////////////////////////////////////////////////////////////////////////////////////

Type System in java:
....................

Java is static typed/strongly typed programming language.
   : The compiler vertifies the type of variable to test whether is comptable or not
if not compiler will throw error.

int a=10;

int is type
a is variable
10 is value

during compile time, the compiler tests whether a has proper type

int a=true;

a cant hold true, because it is boolean, the compiler verfies the type of a .

Dynamic typing:

 the compiler wont verify the type of a variable during compiletime.

Dynamic typed/weak typed programming language.

                             "Groovy can support both"
/////////////////////////////////////////////////////////////////////////////////////////////

Programming styles:
...................

1.Imperative

class Calc{
   int add(int a, int b){
      return a + b;
   }
}
Calc c=new Calc();
c.add(10,10) - 20

2.Delcarative

<h1>Hello</h1>
add 10 10 - 20

->More readable,Simple to use.

Can i write program without proper programming experience?
Yes

follow declarative programming : 

 Any one can write code.

eg:
 -Dev ops
 -scripts written using xml,json,yaml,

Programming languages:

1.GPL - General Purpose Programming language :Imperative

  The language is designed not specific to particular domain
C,C++,Java,Java Script.

2.DSL -  Domain Specific programming language.
 The language is designed for specific use case or domain.
HTML,PHP....


DLS means sepcific,declarative,easy to understand, any body can code.

                 "DSL:readable business rules in your applications"

"Groovy can help to build reusable Dsl".


DSL code:
 move left,move right, 
 take 1 cup of milk add 2 gm sugar
 shutdown machine-1 at 1 pm every day and restart after 2pm 

Machine Health Checkup:
1.find Machine at all locations
2.filter machines which are unhealthy
3.prepare report in pdf mail to healthCheckMaster@tcs.com
4.do this every day at 1pm

Groovy dsls are easy to understand by stack holders,tools users,end users,dev ops enginers.
............................................................................................

Core Features of Groovy Lanaguage:

1.Closures
2.builders
3.runtime & compile-time meta-programming
4.functional programming
5.type inference and static compilation
6.Integration with existing java stack.

//////////////////////////////////////////////////////////////////////////////////////////

Groovy Eco System:
.................
Groovy is core programming language only.

Web:
  Dynamic Web Apps | RestFull Web Services
1.Grails 
  Framework written using groovy.

Build System:
  1.ANT
  2.Maven
  3.Gradle
  4.Grape

2.Gradle
   Build system for java written in groovy

Testing Framework:
 Junit
3.Spock:
  Spock is a testing and specification framework for Java and Groovy applications. What makes it stand out from the crowd is its beautiful and highly expressive specification language.

Package Managers:

NPM - javascript
Nuget -MS .NET

4.SDKMAN!  -Groovy

5.Microservices:
 Spring with Groovy
 Micronaut  -Groovy

SOAP UI - SCRIPTS Written in groovy.
////////////////////////////////////////////////////////////////////////////////////////////

Groovy : Setup:

Groovy can be installed in many ways
...................................
1. Download a source or binary distribution.

2.Use a package manager-sdkMan or bundle for your operating system.

3.Grab the latest plugin for your IDE and follow the installation instructions.

4.Find the latest source code in the Git repo (or the GitHub mirror).

5.If you're using Docker, Groovy is available on Docker Hub.
////////////////////////////////////////////////////////////////////////////////////////////

JDK 1.8.X

Set path in env 

JAVA_HOME
  C:\Program Files\Java\jdk1.8.0_161
PATH
 C:\softwares\apache-groovy-sdk-3.0.7\groovy-3.0.7\bin


Tools provided by groovy:

1.compiler 
  groovyc
 compile groovy into .class.
2.groovy
   To run groovy code. here we dont need to compile.
  java Main  groovy Main
3.groovy console
   -Built in ide to write groovy code
4.REPL  - Read Evaulate Print Loop : Interactive cmd line tool.-groovysh : groovy shell - Wrapper to low level services.


Groovy programs are saved with "filename.groovy"

////////////////////////////////////////////////////////////////////////////////////////////

Program types:

1.Script Program
2.Class based Program

Compile And Exection Model:
groovyc  FileName.groovy ----FileName.class--load on jvm
//////////////////////////////////////////////////////////////////////////////////////////////

Lets Coding:

1.simple coding using groovy console.

2.Using idea editor

3.vs code editor.


java code

package com.mycom;

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello World");
    }

}
///////////////////////////////////////////////////////////////////////////////////////////

C:\session\MicroGenesis\groovy-level-1> 

helloworld.groovy
println "Hello Groovy World"

C:\session\MicroGenesis\groovy-level-1> groovy helloworld.groovy
Hai Groovy!!!



The above code

- dont have its own class like java
- dont have main method like java
- dont have semicollons like java

Since groovy is code but how it is running?

Groovy adds automatically the below code.


What is happening after compilation?

HelloWorld.groovy

println "hello";

After compilation Groovy compiler writes a code like below

import org.codehaus.groovy.runtime.InvokerHelper;

class HelloWorld extends Script {    
                 
    def run() {                                 
  	println "hello";               
    }
    static void main(String[] args) {           
        InvokerHelper.runScript(HelloWorld, args)     
    }
}

1.The HelloWorld class extends the groovy.lang.Script class

2.groovy.lang.Script requires a run method returning a value
  the script body goes into the run method

3.the main method is automatically generated
 
4.and delegates the execution of the script on the run   method
/////////////////////////////////////////////////////////////////////////////////////////////

Groovy topics:
.............

Groovy Language:
...............

1.Language Fundamentals
2.Groovy Object orientations
3.Groovy Closures and Functional Programming
4.Groovy Meta Programming
5.Groovy DSL
6.Groovy and Builders
7.Groovy and Collections
8.Groovy and IO
    -File,
    -JSON
    -XML

/////////////////////////////////////////////////////////////////////////////////////////////


1.Language Fundamentals

1.1.Type system
1.2.literals
1.3.variables
1.4.operators
1.5.control structures
1.6.iterators/loops

Types ,literals ,variables:
.............................
Groovy is dynamic , static typed programming lanugage.

variables are other wise called as "identifiers"

syntax:

Strong typing
 
type variable=value

eg;
 int a =10;

There are two types of datatype

1.primitive  -  int,float,char,boolean....
2.complex/userdefined/ data type - Object types - Customer/Employee....
///////////////////////////////////////////////////////////////////////////////////////////

Lab:

strongtype.groovy
//Strong typing
/**
 * Primitive Types in java
 *  -integers
 *      byte
 *        -128 to 127
 *        1 byte
 *      short
 *       -32,768 to 32767
 *       2 bytes
 *      int
 *       -2Powof31 to 2powerof32
 *       4 bytes
 *       long
 *       - -2power63 to 2powerof64
 *       8 bytes
 *
 *  -float
 *     float - 4bytes
 *     double -8bytes
 *  -char
 *    char- 16 bit unicode char
 *  -boolean
 *     boolean
 *     1 bit - 0 / 1
 *
 *  Reference type/Object Types
 *  Employee e = new Employee();
 *  e - reference variable
 *  Employee - type
 *
 *  Strings are reference types
 *
 */
int a = 10;
float f = 10.5;
char c = 'A';
boolean isActive = true;
double d = 10.89;
short s = 400000;
long l = 100000000;
byte b = 900;

//Reference type
String str = "Hello Groovy";

System.out.println(" Integer " + a);
println("Float " + f);
println "Character " + c;
println "Boolean " + isActive;
println "double" + d;
println "Short " + s;
println "Long " + l;
println "byte  " + b;
println "String " + str

//////////////////////////////////////////////////////////////////////////////////////////////

Weak Typing / Dynamic Typing:
............................

The type of variable is not known during compile time.

syntax;

def identifier(variable)=value(literal)

def - keyword

//Dynamic typing

//int x=10;
//x ="hello";
def myvar = 100;
println "MyVar " + myvar;
myvar = "Hello";
println "MyVar " + myvar;
myvar = true;
println "MyVar " + myvar;
myvar = 10.6;
println "MyVar " + myvar;
myvar = 'c';
println "MyVar " + myvar;
////////////////////////////////////////////////////////////////////////////////////////////

How to know the Type of Identifier?
  
def myvar=100;

instanceof operator used to know the type of variable.

instanceof operator works only with reference types

myvar instanceof int -  compile time error

int -primitive -Reference type for Integer

java provides prmitive data eq Object type(Reference types) which are called "Wrapper Classes".
   Every prmitive type eq Reference type is there

 byte   - Byte 
  :The Byte class wraps a value of primitive type byte in an object.
 short  -  Short
 int    - Integer
 long   -Long
 float  -Float
 double -Double 
 boolean -Boolean
 char    - Character 
 NOPrimitive ------String


////////////////////////////////////////////////////////////////////////////////////////////

Code challange:
...............
In java, i want to store the below number, findout right data type.

myvariable =2232333333333333333333333333333333333331212121212092347329473433483473984732948734983473984739473498473289472394238437498479487948749387492479479347943794479;


//Identify the type of variable.
//instance of operator tells that the variable belongs to what type ?
//either byte /short/long/int.
//variableName instanceof Type

def myvar = 1;
println "My var instance of   : " + myvar instanceof Byte;
println "My var instance of   : " + myvar instanceof Short;
println "My var instance of   : " + myvar instanceof Integer;
println "My var instance of   : " + myvar instanceof Long;
println "My var instance of   : " + myvar instanceof Float;
println "My var instance of   : " + myvar instanceof Double;
println "My var instance of   : " + myvar instanceof BigInteger;
println "With out string concation"
println myvar instanceof Integer
println myvar instanceof Short
println myvar instanceof Byte
println myvar instanceof Long

println "initalizing with long numbers"
myvar = 999999999999999;
println myvar instanceof Integer
println myvar instanceof Short
println myvar instanceof Byte
println myvar instanceof Long
println "initalizing with big  numbers"
myvar = 9999999999999999777777777777777777777777777777777777777777777777777777777777777777;
println myvar instanceof Integer
println myvar instanceof Short
println myvar instanceof Byte
println myvar instanceof Long
println myvar instanceof BigInteger
/////////////////////////////////////////////////////////////////////////////////
println "String identification"
myvar = "hello world"
println myvar instanceof String;
println "Character identification"
myvar = 'A';
println myvar instanceof Character;
println myvar instanceof String;
////////////////////////////////////////////////////////////////////////////////////////////
println "Boolean identification"
myvar = true;
println myvar instanceof Boolean;
/////////////////////////////////////////////////////////////////////////////////////////////////
println "Decimal identification"
myvar = 10.89000;
println myvar instanceof Float; //false
println myvar instanceof Double; //false
println myvar instanceof BigDecimal; //true
///////////////////////////////////////////////////////////////////////////////////////////////////

Type conversion:
...............

Java : 

int a = 10;

int - type
a - variable/identifier
10- value/literal

what is type of a?
  int

how do you say type of a?
 based on type only not based on value.

Is there any type for value?

 what is type of 10 - ?

Yes!....

in Integer family : the default type of value is "int"

int a =10;

a's type is int
10's type is also int.

Type conversion :
 Converting from one type to another type.

 int to byte

Types of conversion:

 - Implicit conversion
     conversion is taken automatically.
     byte b =10;  ===byte ==int
    here 10(int) is converted into byte.   
   int b =9000; ==>int === int

 - Explicit conversion
      We need to convert manually.
  While conversion there is possibility of data loss.
   
   Syntax
 
      targettype = (targetype)sourcetype
      byte b = (byte)900;
  
      int a = 10; //10 type is int---size 4 bytes
        byte b = 19; // 19 type is ? - int only  // byte(2) === int(4)
        //byte b1 =9000; // here 9000 cant be stored inside b1 because b1 capacity is lesser than value
        //what if i want to store 9000 inside b1
        //type conversion
        byte b2 = (byte)10000;
        System.out.println(b2);

/////////////////////////////////////////////////////////////////////////////////////////////

Decimal numbers:
................
What is default type of decimals?

float price = 10.5;  // float === double === 4 bytes ===8 bytes- error

what is type of 10.5?
  double.

type conversion for floating points

ways:

1. by adding f suffix
	
        float price = 10.5f;

here 10.5(double) is converted into float.

2.by using () syntax
      float price1 = (float) 10.5;

//////////////////////////////////////////////////////////////////////////////////////////////

Characters:

the value of char type is int

        char c = 'A'; //int
        char c1 = 99; //int
        System.out.println(c1 + " " + c);
        System.out.println((char) c1 + " " + (int) c);

/////////////////////////////////////////////////////////////////////////////////////////

Groovy  Type Conversion:
//////////////////////////
Groovy mostly takes care of type conversion implicitly.

//type conversion
//int is converted to byte.
byte b = 10000;
println b;
byte b1 = (byte) 10000;
println b1;

float f = 10.5;
float f1 = 10.5f;

println f;
println f1;

//////////////////////////////////////////////////////////////////////////////////////////////////

//Dynamic typing and type conversion

def myvar = 100;
println myvar instanceof Integer /// int
//What if i want to convert into Short, i want to represent in side short/long/byte
def myvar2 = 100 as Short;
println myvar2 instanceof Integer /// int
println myvar2 instanceof Short /// int
//////////////////////////////////////////////////////////////////////////////////////////////

Other Type conversion:
......................

1.Boxing
2.Unboxing
 
Boxing and Un boxing : converting primitive to wrapper and wrapper to primitive
 Integer j = 10;
 int y = j * 10;
 System.out.println(y);

//type conversion
//int is converted to byte.
byte b = 10000;
println b;
byte b1 = (byte) 10000;
println b1;

float f = 10.5;
float f1 = 10.5f;

println f;
println f1;

//////////////////////////////////////////////////////////////////////////////////////////////////

//Dynamic typing and type conversion

def myvar = 100;
println myvar instanceof Integer /// int
//What if i want to convert into Short, i want to represent in side short/long/byte
def myvar2 = 100 as Short;
println myvar2 instanceof Integer /// int
println myvar2 instanceof Short /// int
//////////////////////////////////////////////////////////////////////////////////////////////

Integer j = 10;
int y = j * 10;
println y;

def x = 100;
def result = x * 100;
println result;

/////////////////////////////////////////////////////////////////////////////////////////////

Comments;

1.single line comment:

//

2.Muliti line comment
/*

*/

3.Groovydoc comment
 /**
 *
 *
 /

4.Shebang line

#! /user/bin/env/ groovy

  This for running script directly from the commandline in unix operating system.

///////////////////////////////////////////////////////////////////////////////////////////
                            Key words from groovy


NOte: 

 Keywords cant be used as value or variable in groovy.

 eg: 
 as, breakcase,catch,class, instance of,for, goto def, enum do, const,...........
//////////////////////////////////////////////////////////////////////////////////////////////

Coding Best practices for identifier(variable)
...............................................

- starts with letter,
- starts with $
- starts with _
- not with numbers
 
/////////////////////////////////////////////////////////////////////////////////////////////

Difference with Java:
.....................

Groovy makes code as simple as possible.Groovy uses lot of boilerplate code on behalf of us.

Typical java program structure :

package com.mycompany.project.module.submodule;

import java.util.*;
import java.math.BigInteger;


public class MyClass{

 public static void main(String args[]){

 }
 
}

Groovy Program Structure: Script style,Class based


package is optional

most of the import statements are optionals


script code .....
  -variables ... def a=10; double price=1000;

  -function declarations...

class style:

package 

import statments you can have....

class MyClass{
 

}

////////////////////////////////////////////////////////////////////////////////////////////

1.Default imports.

Java :

  java.lang package is default.

package is logical grouping of code(classes and interfaces).
packages are represented physically as collection of folders.

eg:
   package com.mycom

com is folder
mycom is another folder.

Types of packages:

1.in built packages 
   - packages are offered by language itself.
 in built packages starts with java javax

java.lang
java.util
java.math
java.io
java.net
java.sql
.....etc...

javax.servlet

Note: we cant keep any built in packages for our own packages.


2.custom packages
  packages are created by application developers

 com - company
 org -organization

Syntax / Naming standards:

  com.companyname.projectname.module.submodule.

  com.microgenesis.pms;

  com.microgenesis.pms.profile


  com.microgenesis.pms.profile.search

  
3.Third party packages

  packages are distributed by commnity

 com.atlassian.jira.issue.comments
 com.atlassian.jira.api

////////////////////////////////////////////////////////////////////////////////////////////

Grooy has lot of default packages; you dont need to import them.

1.java.io.*;
2.java.lang.*;
3.java.math.BigDecimal
4.java.math.BigInteger
5.java.net.*
6.java.util.*
/////////////////////////////////////////////////////////////////////////////////////////

Groovy language also has its own packages

 Groovy has extend from java, which supports all java packages + who supports extra packages.

groovy.XXX

groovy.lang.*;
groovy.util.*;
////////////////////////////////////////////////////////////////////////////////////////////

; and groovy

In groovy ; optional.


////////////////////////////////*************************///////////////////////////////////

Values In Groovy:
.................

1.Strings && Characters
2.Numbers
3.Booleans
4.Lists
5.Arrays
6.Map
7.Objects
/////////////////////////////////////////////////////////////////////////////////////////////

Strings:
 Text literals are represented in the form of collection of characters called strings.
 Strings are Objects.
 Strings are instance of java.lang.String class as well as groovy.lang.GString
 Characters in groovy is represented in String object.
 Each character is 16-bit unicode character.


String declaration Patterns:
............................

1.single quoted  - ''
2.Double quoted  = "" 
3.Triple  Single Quoted = '''
4.Triple double quoted = """
5.slashy quoted - / /
6.Dollar slashy quoted - $/ /

///////////////////////////////////////////////////////////////////////////////////////////// 

1.single quoted:

def singleStr = 'Hello,SingleQuoted Strings '
println singleStr instanceof java.lang.String;
println singleStr;
/////////////////////////////////////////////////////////////////////////////////////////////

2.Double qutoed

def doubleQuotes = "Hello,Double Quotes"
println doubleQuotes instanceof java.lang.String;
println doubleQuotes;

String Concatnation;
....................
println "............................."
def name = "Subramanian";
def greeting = 'Hello ' + name;
println greeting;
println greeting instanceof java.lang.String;
greeting = "Hello " + name;
println greeting;
println greeting instanceof java.lang.String;

Interpolation:
 -It is replacement of existing string concation
 -way of access variables/expression inside string is so different
 -This feature is not available in java language
 
in order to add interpolation syntax, groovy has added a new class groovy.lang.GString

GString Syntax:

 "${expression}"
 "$expression"
println "..........String Interpoltion : GString..................."

def firstName = "Subramaian";
def newGreeting = "Hello ${firstName}";
println newGreeting;
println newGreeting instanceof java.lang.String
println(newGreeting instanceof groovy.lang.GString)
//simplified version
newGreeting = "Hello $firstName";
println newGreeting;
//numerical expression
def salary =1000;
def noofdays =100;
def totalSalary ="Total Salary is ${salary * noofdays}"
println("$totalSalary")

Note: single quote cant have string interpolation - $
//////////////////////////////////////////////////////////////////////////////////////////////

Mutil Line Strings:
...................

How to write multi line strings in java

    String title = "Micro";
        String doc = "<html>" +
                "<head>" +
                "<title>" + title + "</title>" +
                "<body>" +
                "<h1> Hello</h1>" +
                "</body>" +
                "</body></html>";
        System.out.println(doc);

Groovy Multi line strings:
 -triple quote single quto 

println "..........Multi line : triple single quote..................."

def htmlDoc = ''' 
   <html>
      <title>Micro</title>
      <body>
         <h1> Hello</h1>
      </body>
     </html>
'''
println htmlDoc;

-triple quote double quote : With String interpolation.

println "..........Multi line : triple double quote..................."
def title = 'Micro Technology';
def htmlnewDoc = """
   <html>
      <title>$title</title>
      <body>
         <h1>Hello</h1>
      </body>
     </html>
"""
println htmlnewDoc;
//////////////////////////////////////////////////////////////////////////////////////////////

Escaping Special Characters:
............................

//here i want to print single
def quote = " Hello ! how are you? \\ i am fine what \" about you ";
println quote;
quote = ' Hello ! how are you? \' i am fine what about you';
println quote;

quote = " Hello ! how are you? \t \t i am fine what \n about you";
println quote;

def priceInEuro = "Price in Euro \u20AC";
println priceInEuro

special characters you can escape:
...................................

\b - backspace
\f - formfeed
\t  -tab
\s -single space
\' - single quote within single quoted.
\" - double quote witthin another double quote
\unicode - unicode escape
//////////////////////////////////////////////////////////////////////////////////////////

Slashy String:
..............
 Strings inside slash / strings /

// Slashy Strings

//syntax : 1 simple strings
def myValue = / This is demo slashy /;
println myValue
//syntax : 2 with escaped with back slash
def myquote =/How are you! \i am fine \;/;
println myquote
//syntax 3 : multi line with slashy strings
def doc = / hello
 how are you?
 welcome
 greetings   
/;
println doc;
// syntax 4 : interpolation with slashy strings

def name='Subramanian'
def greeting= / Hello ${name} /;
println greeting

Applications of Slashy;

-Text Processing:
  In any language, text processing can be done using "Regular Expression" : Regex.

String mydata = " hey \; \$ hello 0 1, how are y subramanian , 7m3 ";

i want  to extract nos
i want to extract special characters
i want to only $

Task: write a code-java to extract nos,spicial characters,$

String Processing is most common task in programming.
Unix os introduced text processing methods - Streams

Unix text processing programs - utitility programs- dsl's

grep input | x | y | result -Unix dsl for text processing.

Regular Expression:
  Regular expression is dsl language to process strings / text
  Regular expression works based on symbols called "Patterns"
  Now a days every programming language supports Regular   Expression,language runtime and compiler provides regular   expression support.


Regular expression in java:

java.util.regex;

Regular expression uses symbols
 +
 *
 ~
 {}
 ?

Simple Pattern syntax:
......................

 \d+ -match /find any number in the string - match any number one or more times

Declare pattern in java
  
   String pattern =  "\d+"; -  this is compile time error because, special characters
needed to be escaped.
   
   String pattern ="\\d+" -  now it is vaild , because we have escaped \+ chacter by \

Drawback of this syntax:
  Very complex , when we form complex regular expressions
eg:
 "\\+d\\+d\\*d ^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$


package com.mycom;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PatternMatching {
    public static void main(String[] args) {
        System.out.println("Regular Expression using Java");
        String inputString ="hey  hello 0 1, how subramanian 1 , 7m3";
        // \+d - pattern syntax in regular expression.
        String pattern =  "\\d+";
        System.out.println(pattern);
        //Compile the Pattern
        Pattern compiledPattern = Pattern.compile(pattern);
        Matcher digitMatcher =compiledPattern.matcher(inputString);
        System.out.println("Source String "+ inputString);
        while(digitMatcher.find()) {
            System.out.println(digitMatcher.group());
        }

    }
}

Groovy Simplifies the above pattern matching using "Slashy Strings"
.....................................................................

Version : 1 

Just Replace patterns with slashy strings, continue others with java apis

import java.util.regex.Matcher
import java.util.regex.Pattern

println "Regular Expression-Groovy Implementation"
//Step 1: declare input string
def inputString = "hey  hello 0 1, how subramanian , 7m3";
//Step 2: declare string inside slashy String
String pattern = /\d+/;
Pattern compiledPattern = Pattern.compile(pattern);
Matcher digitMatcher = compiledPattern.matcher(inputString);
println("Source String " + inputString);
while (digitMatcher.find()) {
    println(digitMatcher.group());
}

Version 2: Replace compile Code:
.................................
-Replace Pattern.compile api with ~/d+/
  => "~" is operator - compile operator,later we will discuss this deeply.

println "Regular Expression-Groovy Implementation"
//Step 1: declare input string
def inputString = "hey  hello 0 1, how subramanian , 7m3";
Pattern compiledPattern = ~/\d+/;
Matcher digitMatcher = compiledPattern.matcher(inputString);
println("Source String " + inputString);
while (digitMatcher.find()) {
 println(digitMatcher.group());
}

//
Version 3 :  slashy +pattern.compile + pattern.matcher
........................................................
 (inputString =~/\d+/)

 "=~" - Compile + Match operator.

println "Regular Expression-Groovy Implementation"
//Step 1: declare input string
def inputString = "hey  hello 0 1, how subramanian , 7m3";
def compiledPattern = ~/\d+/;
def matcher = (inputString =~ /\d+/)
while (matcher.find()) {
    println(matcher.group());
}

//////////////////////////////////////////////////////////////////////////////////////////

Coding Challange:
.................
Finding all dates in a String and getting
//the date month and year can be as simple as below

[dd-mm-yyy] - output format

def dates = "28-02-1992 a b c  15-06-1982 15-Apr-1982";

Expected output:

28-02-1992, 15-06-1982
/////////////////////////////////////////////////////////////////////////////////////////////
dollar SlashyString:
->Multi line + String interpolation

  $// - multi line without interploation
  $/""" xxx """/ multi line with interploation

println "Dollar Slashy Strings";

def name ="Subramanian"
def dollarSlashy = $/ 
   Hello,$name
   100
   prices
   1
   groovy
   34
/$
println dollarSlashy
def matcher = (dollarSlashy =~ /\d+/)
while (matcher.find()) {
    println(matcher.group());
}
////////////////////////////////////////////////////////////////////////////////////////////

Numbers:

Primitives : 
  byte,short,int,long
  float,double
  boolean
  char
Reference types
  Integer - Wrapper classes
  java.math.BigDecimal , java.math.BigInteger

def a =100;
a instanceof Integer

How groovy identifies Integer
  Integer.MAX_VALUE 

How groovy identifies Long
  Integer.MAX_VALUE + 1 - posstive
  Integer.MAX_VALUE - 1 - negative values

Numbers can be represented 
 -binary
    -prefx 0b

println("Numbers")
println "Binary Numbers"
def a=0b10101111
println a;

 -octaal
     -prefix 0
println "Octal "
def b = 077;
println b;

-hexadecimal
   -prefix  0x

println "Hexa decimals"
def c = 0x77;
println c;


 -decimals

println "Decimal literals"

def d =10;
BigDecimal bd =90.89;
println("$d $bd")

Underscore in literals
......................
  when writing long numbers , its harder to read, in order to group long numbers
 "_" notation is used.

eg: credit card numbers,sss,adharno,bigamount..


println "Under scores"

long creditCardNumber = 1234_5678_9012_3456L;
println creditCardNumber
////////////////////////////////////////////////////////////////////////////////////////////

Number suffixes:

 float f =10.5f

 f / F - float
 d / D - double
 l/L   - long
 G/g   - BigInteger
 G/g    -BigDecimal
 i - Integer

long l = 1233l;
int  j = 89i;

Math Operations: later we will see in operators sections
...............................................................................................
Booleans:

In java booleans are represented by boolean type with value "true/false".

Booleans In java:

        boolean isActive = true;
        boolean isEnabled = false;
        //booleans inside if to check condition whether is true or not
        if (isActive) {
            System.out.println("Active");
        } else {
            System.out.println("InActive");
        }
        if (isEnabled) {
            System.out.println("Enabled");
        } else {
            System.out.println("Disabled");
        }
        //Result of some relational and conditional operators
        int a = 108;
        if (a > 100) {
            System.out.println("A is greater than 100");
        } else {
            System.out.println("A is not greater than 100");
        }

Groovy  and Booleans:
.....................

def start = 0;
//int start =0;
if (start) {
    println("START");
} else {
    println("STOP");
}

def name = "Subramanian";
if (name) {
    println "NAME Found"
} else {
    println "NAME not Found";
}

Groovy truthy and falsy values:
...............................
In Groovy everthing is true execept the below values

falsy values:

1.boolean false
2.0
3."" (Empty string)
4.null 
5.Empty list => []
6.Empty Map  => [:]

/**
 * Booleans in Groovy
 */

def isActive = true;
def isEnabled = false;
boolean status = true;
def a = 10;

if (isActive) {
    println "Active"
} else {
    println "InActive"
}
if (isEnabled) {
    println "Enabled"
} else {
    println "Disabled"
}
if (status) {
    println "Ok"
} else {
    println "NotOk"
}
if (a > 100) {
    println("A is greater than 100");
} else {
    println("A is not greater than 100");
}
/////////////////////////////////////////////////////////////////////////////
def start = 0;
//int start =0;
if (start) {
    println("START");
} else {
    println("STOP");
}

def city = "";
if (city) {
    println "CITY Found"
} else {
    println "CITY not Found";
}
def emp = null;
if (emp) {
    println "EMP Found"
} else {
    println "EMP not Found";
}

def name = "Subramanian";
if (name) {
    println "NAME Found"
} else {
    println "NAME not Found";
}
////////////////////////////////////////////////////////////////////////////////////////////

Collection Values : Data Structure
  List
  Set
  Map

List :
 java.util.List
 
how to declare list?
println "...............List..................."

def list = [1, 2, 3, 45, 66];
println list;
println list instanceof java.util.List
println list instanceof java.util.ArrayList
def names = ["Subramanian", "Geetha", "Ram", "Karthik"];
println names
def something = [1, "hello", 2, true];
println something

//declare linkedList
def nodes = [1, 2, 34, 56] as LinkedList;
println nodes instanceof java.util.LinkedList
///////////////////////////////////////////////////////////////////////////////////////////

Array :
  Array is fixed size , collection of items.

String[] strs = ['Hello', 'Hai'];
println strs
//def [] ints = [1,23]
def ints = [1, 23] as int[];
println ints instanceof java.util.ArrayList
println ints instanceof int[]

//Arrays : java style declaration
def mynumbers = new int[]{2, 45, 1, 2, 3};


Booleans and List && Array
...........................

//empty list ; no values
def emptyList = [];
//truth and falsy values in List

if (nodes) {
    println "Nodes Present"
} else {
    println("Nodes not Present")
}
if (emptyList) {
    println "Not Empty List"
} else {
    println("Empty  List")
}


def emptyArray = [] as int[];
if (emptyArray) {
    println "Not Empty Array"
} else {
    println("Empty  Array")
}
////////////////////////////////////////////////////////////////////////////////////////////
Map : Key -Value Pair Data Structure:
.....................................

Java :
HashMap map = new HashMap();
map.put(1,"Subramaian");
map.put(2,"Karthik");

In Groovy:

def map = [1:'subramanian',2:'Karthik']

def map = [1: 'Subramanian', 2: 'Ram', 3: 'Karthik']
println map;
println map.get(1)
println map instanceof java.util.Map;
println map instanceof java.util.LinkedHashMap;

//empty map declaration
def emptyMap = [:];
println(emptyMap)
//Truthy and falsy values in Map
if(map){
    println "Map Present"
}else{
    println "Map not present"
}

if(emptyMap){
    println "Map Present"
}else{
    println "Map not present"
}
/////////////////////////////////////////////////////////////////////////////////////////////
                                              Operators
//////////////////////////////////////////////////////////////////////////////////////////////

Arithmetic operators:
......................
+ - Addition
- - Substraction
* - multiplication
/ - division
% - remainder
** - power operator - groovy operator


Unary Operators:

 ++
 --
++a
a++
a--
--a

println "Arthimetic operators"

def a = 10
def b = 20;

println "Addition ${a + b}"
println "Substraction ${a - b}"
println "Multiplication ${a * b}"
println "Division ${a / b}"
println "Remainder ${a % b}"
println "Power of  ${a**2}"
println "Unary + ${a++}"
println "Unary + ${++a}"
/////////////////////////////////////////////////////////////////////////////////////////////

Assignment operators
.............................................................................................
//single assignment
def a = 10;
def b = 20;
println "$a $b";
//multiple assigment : javastyle
int s = 1, d = 80;
def x = 1, y = 2;
println "$x $y";
//multiple assignment : groovy style
def (x1, y1, de) = [10, 20, 9];
println "$x1 $y1 $de";

//mixed data type in one line
def (status, today, counter) = [true, "02-02-19", 1];
println "$status  $today  $counter"

//extra values are left
def (one, two) = [1, 2, 3, 4, 5];
println "$one $two";
//lesser values but extra variable and its value is null
def (xy, xz, xa) = [1, 3];
println "$xy $xz $xa";
//def (name,age,city); //error
def (name, age, city) = [];
println "$name $age $city"

Assignment and Artihmetic:
...........................

 def a =90;
 def res = a + 1
 def a+=3

+=
-=
*=
/=
%=
**=
//////////////////////////////////////////////////////////////////////////////////////////
 
Relational Operators: The Result would be boolean
/////////////////////

== equal
!= not equal - different
< lessthan
> greater than
<= less than or equal
>= greater than or equal

def a = 10;
def b = 10;
println a == b;
println a < b;
println a <= b;
println a > b;
println a >= b;
println a != b;
////////////////////////////////////////////////////////////////////////////////////////

Logical Operators: boolean result
..................

&&  - logical "and"
||  - logical "or"
!   - logical "not"

These operators works based on truth table

and
0 0 - 0
1 0  - 0
0 1  -1
1 1  -1

def isActive = true;
def isEnabled = true;
println " && => " + isActive && isEnabled; //true
println " || => " + isActive || isEnabled; //true
println " !  => " + !isEnabled; //false

def name = ""   //false
def city = "Coimbatore";  //true
println name && city; //?


def start = 0; //0 false
def stop = 10; //10 true
println start || stop; // true

def isEmpty;
println isEmpty;
println !isEmpty
isEmpty = "hello"
println !isEmpty
///////////////////////////////////////////////////////////////////////////////////////////

Bitwise and bit shift operators:
.................................

Bitwise operators are used to maniuplate bits - based on 2's compliement theories.

& - bit wise and
| - bit wise or
~  - bitwise negation

bit shit operators

<<  -left shift
>> -right shift
>>> - right shift unsigned.
////////////////////////////////////////////////////////////////////////////////////////////

Conditional Operators:
......................

1.not operator - !
2.Tenary operator - ?:
3.Elvis Operator  - ?

Elvis operator:
..............
The "Elvis operator" is a shortening of the ternary operator. One instance of where this is handy is for returning a 'sensible default' value if an expression resolves to false-ish

def a=0

 if a is true, print a's value , else assign our own default value.

?: =>Elvis operator

//Elvis operator is used to assign default values if a variable is false.

def counter; //null
//if counter is false,then initalize 1 else the value of the counter
println counter ?: 1;


//!
def myvar = true;
println !myvar;
//?:
//where ever if ..else lader you can replace with ?:
def a = 10;
def b = 20;
if (a == b) {
    println "Equal"
} else {
    println "Not equal"
}
a == b ? println("Equal") : println("Not Equal");
def result = a == b ? "Equal" : "Not Equal";
println result
def name = "subramanian";
def found = name ? "Name Found $name" : "Name not Found"
println found;
//////////////////////
def price;
//Using tenary
println price ? price : 10;
//Using elivs
println price ?: 10

def totalPrice = price?:10 * 100;
println "Total Price $totalPrice"

////////////////////////////////////////////////////////////////////////////////////////////

Regular Expression Operators:
.............................

Pattern Operator : ~
~/pattern/ ->Pattern

//~Pattern operator
def pattern = ~/\d+/
println pattern instanceof Pattern

Find operator:=~

Alternatively to building a pattern, you can directly use the find operator =~ to build a java.util.regex.Matcher instance

=~ ->Returns Matcher Instance

def text="mytext"
//=~ Find operator which returns Matcher
def matcher = (text =~/\d+/);
println matcher instanceof Matcher; 


Match operator:
..............

 ==~ Matcher Operator : returns boolean
 !=~ Matcher Operator : returns boolean
/////////////////////////////////////////////////////////////////////////////////////////////
Advanced Operators:
1.Spread Operator
2.Range Operator
3.Spaceship Operator
4.Subscript Operator
5.Identity Operator
6.Coercion Operator
7.Call Operator
8.Method Reference/ Pointer Operator 
9.Object Operators
   Safe navigation operators
   Direct field access operators
   Method pointer operators
   Method reference operators
/////////////////////////////////////////////////////////////////////////////////////////////

                                          Conditional Strucutures
/////////////////////////////////////////////////////////////////////////////////////////////

1. if/else
  Groovy supports if/else from java 

def isActive = true;

if (isActive) {
    println "Active"
} else {
    println "Not Active"
}

2.Switch...case
 
 Groovy switch case can handle any type of switch value and different kinds of matching can be performed.

def x = 1.23;
def result = "";

switch (x) {
    case "foo":
        result = "foo value"
        break
    case "bar":
        result = "bar value"
        break
    case 122:
        result = "some numbers"
        break
    case true:
        result = "some boolean"
        break
    case Integer:
        result = "Integer value"
        break
    case ~/fo*/:
        result = "Regular expression value"
        break
    case Number:
        result = "Number value"
        break;
        defalut:
        result = "No match found"
}
println result;
/////////////////////////////////////////////////////////////////////////////////////////////
				Iterators - Loops
/////////////////////////////////////////////////////////////////////////////////////////////

Groovy supports java/c style loop

for,while,do..while
//classic for loop
for (int i = 0; i < 10; i++) {
    println i;
}
for (def i = 0; i < 10; i++) {
    println i;
}
//classic while loop
def x = 0
def y = 5
while (y-- > 0) {
    x++
    println "Y $y"
}
println x;
//do ..while
def counter = 5;
def fact = 1;
do {
    fact *= counter--
} while (counter > 1)
println fact
..............................................................................................

Coding Challanges:
..................

Q:1.find even numbers from 0 to 1000 range.


Q.2.find Grade for given score

 score is greater than 95 - A

 80 tO 95 - Grade B

 60 to 80 -Grade C
 
 50 TO 60 - Grade D
 
 less THAN 50 - F 

 /////////////////////////////////////////////////////////////////////////////////////

Groovy Script Programming:
..........................

-collection of variables and methods(functions).

How scripts are working?

 When we write script , groovy creates a class "ScriptClass" , will have main method and run method.
 The name of the script file  will go as name of the script class name.

eg:

Written by you?

 HelloWorld.groovy

 println "Hello Script"

Groovy will write like below

class HelloWorld extends Script{

    //method called run
    def run(){
      println "Hello Script"
   }

 
 static void main(String[]args){
  
      InvokerHelper.runScript(HelloWorld,args)
 }

}
/////////////////////////////////////////////////////////////////////////////////////////

methods:
........

-methods are going to group biz/application logic.


Syntax:

 1.static typed syntax ; looks like a java syntax

   returntype methodName(args){
     //method body
     return statement
   }
   void sayHello(){ 


   }
2. dynamic typed syntax

    def methodName(args){
      //method body
    }

MethodSimple.groovy

//methods simple

//static type
//mehtod declaration
void sayHello() {
    println "Hello";
}
//calling method
sayHello();

script class and methods:
.........................
-all methods will go inside script class as instance methods of script class
-methods invocation will go inside run method.

class MethodSimple extends Script{

      void sayHello() {
           println "Hello";
      }

    //method called run
     def run(){
         sayHello();
     }

 
 static void main(String[]args){
  
      InvokerHelper.runScript(HelloWorld,args)
 }

}

/////////////////////////////////////////////////////////////////////////////////////////////

methods with return type and args:
..................................

//methods simple

//static type
//mehtod declaration
void sayHello() {
    println "Hello";
}
//calling method
sayHello();

String sayHai(String name) {
    return "Hai $name"
}

println("${sayHai('Subramanian')}");

def mymethod() {
    println 'mymehtod';
}

mymethod();
///////////////////////////////////////////////////////////////////////////////////////////
Method flavours:Args:
.....................

args; receving
parameters : passing


-When compare to java, groovy allows to skip passing parameters. 
if you skip the value, the variable will hold "null" value.


def sayHello(String name) {
    println("$name");
}
sayHello('Subramanian');  => Subramanian
sayHello(); => null

Default values:
...............
 if you dont supply parameter, the groovy initalize the default values.

def sayHello(String name = 'defaultName') {
    println("${name.toUpperCase()}");
}

sayHello('Subramanian');
sayHello();

def add(int a = 0, int b = 0) {
    int result = a + b;
    println "The Add Result is $result";
}

add(10, 10)
add()

def doStuff(def x, def y) {
    int result = x + y;
    println "The DoStuff Result is $result";
}

doStuff(10, 10);
doStuff(78.9, 89.90)
//doStuff(true,90.78) : this produces runtime error;
//////////////////////////////////////////////////////////////////////////////////////////

Var -Args : Variable Args:
.........................
 what if i want a method, that method must take n-number of args.
 What if i pass more parameters, but i have less args.

type ...args
//doStuff(true,90.78) : this produces runtime error;
def logger(String ... message) {
    println message;
}

logger('hello'); //single parameter
logger('hello','hai'); //2 parameter
logger('hello','greetings','welcome'); //3 parameter
////////////////////////////////////////////////////////////////////////////////////////////

Without type keywords or def keywords

//def doSomething(def x){
//    
//}
//def doSomething(String x){
//
//}
def doSomething(x = 0) {
    pritln x
}

doSomething(1000)

////////////////////////////////////////////////////////////////////////////////////////////

Method Return values:
....................

type method(){}

def method(){}

String sayHello() {
    return 'Hello';
}

String result = sayHello();
println result;
println sayHello();

int add() {
    return 10 + 10;
    //  return "hello";
}

println add();

def sayHai() {
    return "Hello"
    //return 100;
}

println sayHai();

******************************************************************************************
Note:
In groovy , return statement is optional, not necessary, by default every method returns some
value , whether the return statement is present or not.

"Last line of method , will be return value";


String sayHello() {
    return 'Hello';
}

String result = sayHello();
println result;
println sayHello();

int add() {
    return 10 + 10;
    //  return "hello";
}

println add();

def sayHai() {
    return "Hello"
    //return 100;
}

println sayHai();
////////////////////////////////////////////////////////////////////////////////////////////////////

def getCount() {
    200; // return 200
}

println getCount()

def calculate() {
    10 + 10;
    20 + 20;
    50 + 50;
}

println(calculate())

def multiply(int a = 0, int b = 0) {
    println "multiply";
    def result = a * b;
    result * 10;
}

println(multiply(23, 89))
println(multiply()) // result

double multiply_1(int a = 0, int b = 0) {
    println "multiply";
    def result = a * b;
    result * 10;
}

println(multiply_1(23, 89))
println(multiply_1()) // result

void multiply_2(int a = 0, int b = 0) {
    println "multiply";
    def result = a * b;
    result * 10;
}

println(multiply_2(23, 89))
println(multiply_2()) // result // would be null

/////////////////////////////////////////////////////////////////////////////////////////////
def login(String userName = "admin", String password = "admin") {
    userName.equals("admin") && password.equals("admin");
}

def status;
status = login('guest', 'guest') ? 'Login Success' : 'Login failed';
println status
status = login() ? 'Login Success' : 'Login failed';
println status;
///////////////////////////////**********///////////////////////////////////////////////////
                    Object oriented Programming in Groovy
////////////////////////////////////////////////////////////////////////////////////////////
Object oriented Concepts:
1.Abstraction
2.Encapsulation
3.Modularity
4.Hierachy
5.Typing
6.Persistency
7.Concurrency

////////////////////////////////////////////////////////////////////////////////////////////

Abstraction:
  High level representation of domains in software
  In Programming languages abstraction is implemented via "classes , interfaces"...

class:

1. class is used to organize variables and methods under single unit.
    variables represent data, methods represent how to operate on that data.
2. class is template for a problem domain we call object.

classes are in java language:

1.class is used to represent object template.
2.class contains variables and methods
3.class can also contain another class,interfaces ; inner classes
4.Every java program must start with class definition only.
5.Every program can have mulitple java classes , but recommended is only one class per   file/program
6.Every java program must have main method.

Objects:

1.Runtime representation of class we call "Object"
2.Object means , memory representation of class.
3.We can create more objects from a single class, but each object has its own memory address
4.Object is pointed by a variable called "reference variable" ; pointer to object
5.object contains methods, and variables called instance members.


Steps:

1.declare class

package com.microgenesis.oo;

public class HelloWorld {
    public String sayHello(String name) {
        return "Hello " + name;
    }
}

2.Create Object - Allocate Memory for a class.

 You can create object for any class any where in the application.

here i will show you  , in main method.

 HelloWorld hello      =          new         HelloWorld();
   |         |         |           |             |
 Type     Reference assigment  memory         constructor call - method call
          Variable  operator   allocation
                               operator


package com.microgenesis.oo;

public class HelloMain {
    public static void main(String[] args) {
        HelloWorld hello = new HelloWorld();
        String result = hello.sayHello("Subramanian");
        System.out.println(result);
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////

class declaration types:

1.The class contains apis  - Service classes.
2.The class contains apis to interact with databases - Repository classes/DAO Classes
3.The class contains web end points - Controllers
4.The class contains only data - Entity classes/ Bean
5.The class contains global data  -  class with static data.

////////////////////////////////////////////////////////////////////////////////////////////

Step 1:
Entity
Product.java
package com.microgenesis.oo;

//Entity class ; Which reprents data pointer
public class Product {
    private int id;
    private String productName;
    private double price;
    private int qty;
    private boolean inStock;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getProductName() {
        return productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQty() {
        return qty;
    }

    public void setQty(int qty) {
        this.qty = qty;
    }

    public boolean isInStock() {
        return inStock;
    }

    public void setInStock(boolean inStock) {
        this.inStock = inStock;
    }


}

ProductRepository.java
package com.microgenesis.oo;

import java.util.Arrays;
import java.util.List;

public class ProductRepository {
    public List<Product> findAll() {
        Product product1 = new Product();
        product1.setId(1);
        product1.setProductName("Phone");
        product1.setInStock(true);
        product1.setPrice(23.89);
        product1.setQty(100);

        Product product2 = new Product();
        product2.setId(2);
        product2.setProductName("TV");
        product2.setInStock(true);
        product2.setPrice(29993.89);
        product2.setQty(10000);

        return Arrays.asList(product1, product2);
    }
}

ProductService.java
package com.microgenesis.oo;

import java.util.List;

public class ProductService {
    //declare variable
    private ProductRepository repository = new ProductRepository();

    public List<Product> findAll() {
        return repository.findAll();
    }
}

Application.java
package com.microgenesis.oo;

import java.util.List;

public class Application {
    public static void main(String[] args) {
        ProductService service = new ProductService();
        List<Product> products = service.findAll();
        for (Product product : products) {
            System.out.println(product.getId() + " " + product.getProductName());
        }
    }
}
/////////////////////////////////////////////////////////////////////////////////////////////

Java Beans:
...........

-It is a standard  or spec for declaring a class and create object.

Rules:

1.class must be declared with public keyword
 
  public class Customer{}

2. class must have instance variables 

   public class Customer {
          int id;
          String name; 
   }
3. instance variables must be marked with private keyword

   public class Customer {
          private int id;
          private String name; 
   }

 - instance variables hold data of object like id,name.

 How to initalize the data?

 Ways:
3.1.direct initalization
  private int id =1;
  private String name ="Subramanian"
 which is not standard way.

3.2.after object creation via reference variable
public class Customer {
    int id;
    String name;
}

Customer customer = new Customer();
        customer.id =1;
        customer.name ="Subramanian";
        System.out.println(customer.id + " " + customer.name);

 it is valid but not recommended as per java bean standards.

4.we must introduce methods to initalize and read instance variables
  -methods : accessors and mutatators ; setters and getters.

set methods - to initalize the data
get methods - to read data.

set method rules:

  public void setVariableName(datatype variableName){

     this.variableName =variableName
  }
  public void setId(int id) {
        this.id = id;
    }
    public void setName(String name) {
        this.name = name;
    }

getter:
 
  public returnType getVariable(){
      return variable;
  }
package com.microgenesis.oo;

public class Customer {
    private int id;
    private String name;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

4.1.data can initalized without setter methods

 via constructors

constructors:
  
-It is special method
-to initlize instance variables during object creation.

constructors offer various ways to initalize object.

package com.microgenesis.oo;

public class Customer {
    private int id;
    private String name;

    //default constructor
    public Customer() {

    }

    //args constructors;
    //only id
    public Customer(int id) {
        this.id = id;
    }

    public Customer(String name) {
        this.name = name;
    }

    public Customer(int id, String name) {
        this.id = id;
        this.name = name;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

package com.microgenesis.oo;

public class JavaBeanSpec {
    public static void main(String[] args) {
        Customer customer = new Customer();

//        customer.id =1;
//        customer.name ="Subramanian";
//        System.out.println(customer.id + " " + customer.name);
        customer.setId(12);
        customer.setName("Subramanian");
        System.out.println(customer.getId() + " " + customer.getName());

        //args constructors
        //single id
        Customer customer1 = new Customer(125);
        customer1.setName("foo");
        System.out.println(customer1.getId() + " " + customer1.getName());

        Customer customer2 = new Customer("bar");
        customer2.setId(1000);
        System.out.println(customer2.getId() + " " + customer2.getName());

        Customer customer3 = new Customer(7888,"barfoo");
        System.out.println(customer3.getId() + " " + customer3.getName());



    }
}
/////////////////////////////////////////////////////////////////////////////////////

setters vs constructors:

 Both recommened:

1.Use setter once object is created. lazy initalization
2.Use constructor during object creation; Eagar intialization
/////////////////////////////////////////////////////////////////////////////////////

Groovy and Object Oriented Programming:

1.Groovy uses Groovy Standards
   ->Groovy Bean standards


1.declare class
2.create object

class:

1.Groovy classes are very similar to Java classes, and are compatible with Java ones at JVM level.

2.They may have methods, fields and properties (think JavaBean properties but with less boilerplate).

3.Classes and class members can have the same modifiers (public, protected, private, static, etc) as in Java with some minor differences at the source level


The key differences between Groovy classes and their Java counterparts are:

1.Classes or methods with no visibility modifier are automatically public (a special annotation can be used to achieve package private visibility).

2.Fields with no visibility modifier are turned into properties automatically, which results in less verbose code, since explicit getter and setter methods aren’t needed.

3.Classes do not need to have the same base name as their source file definitions but it is highly recommended in most scenarios

4.One source file may contain one or more classes (but if a file contains any code not in a class, it is considered a script). Scripts are just classes with some special conventions and will have the same name as their source file (so don’t include a class definition within a script having the same name as the script source file).


Fields  Declaration Rules:

1.fields must be declared without any explicit modifer
2.fields must have strong typing not def keyword
3.As soon as you declare fields based on the above rules
  groovy will generate setter and getter methods.



Lets code:

1.create groovy class and create object.

package com.microgenesis.groovy.beans

class User {
    //in groovy theses variables scope is public by default
    int userId;
    String userName;
    String password;
}

import com.microgenesis.groovy.beans.HelloWord
import com.microgenesis.groovy.beans.User

//Strong typing
HelloWord helloWord = new HelloWord();
println(helloWord.sayHello());
println(helloWord.sayHelloAgain("Subramanian"))

def helloWorld1 = new HelloWord();
println(helloWorld1.sayHello());
println(helloWorld1.sayHelloAgain("Ram"))

//Groovy beans
User user = new User();
//calling setters
user.userId = 1; // triggers setters, no need of calling setters manually
user.userName = "Subramanian"; //
user.password = "admin"
//getters
println "User Info ${user.userId} ${user.userName} ${user.password}"

//constructors: id,name,password :groovy uses map syntax to create constructors dynamically
//key:value ; key-instance variable; value ; variable value
User user1 = new User(userId: 1, userName: 'root', password: 'super');
println "User Info  ${user1.userId} ${user1.userName} ${user1.password}"




















































































